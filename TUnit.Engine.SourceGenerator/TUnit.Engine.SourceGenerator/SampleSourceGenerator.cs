using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TUnit.Engine.SourceGenerator;

/// <summary>
/// A sample source generator that creates C# classes based on the text file (in this case, Domain Driven Design ubiquitous language registry).
/// When using a simple text file as a baseline, we can create a non-incremental source generator.
/// </summary>
[Generator]
public class SampleSourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required for this generator.
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var sourceBuilder = new StringBuilder("""
                                              // <auto-generated/>
                                              using System.Runtime.CompilerServices;

                                              namespace TUnit.Engine;

                                              file class TestGenerator
                                              {
                                                  [ModuleInitializer]
                                                  public static void Initialise()
                                                  {
                                              
                                              """);
        foreach (var method in context.Compilation
                     .SyntaxTrees
                     .SelectMany(st =>
                         st.GetRoot().DescendantNodes().OfType<MethodDeclarationSyntax>()
                             .Select(m => new Method(st, m)))
                     .Where(x => x.MethodDeclarationSyntax.DescendantNodes().OfType<AttributeSyntax>().Any()))
        {
            ProcessTests(sourceBuilder, context, method);
        }

        sourceBuilder.AppendLine("""
                                    }
                                 }
                                 """);

        context.AddSource($"TestInitializer.g.cs", sourceBuilder.ToString());
    }

    private void ProcessTests(StringBuilder sourceBuilder, GeneratorExecutionContext context, Method method)
    {
        var semanticModel = context.Compilation.GetSemanticModel(method.SyntaxTree);

        var symbol = semanticModel.GetDeclaredSymbol(method.MethodDeclarationSyntax)
                     ?? semanticModel.GetSymbolInfo(method.MethodDeclarationSyntax).Symbol;

        if (symbol is not IMethodSymbol methodSymbol)
        {
            return;
        }

        if (methodSymbol.ContainingType.IsAbstract)
        {
            return;
        }

        var attributes = symbol.GetAttributes();

        var className =
            methodSymbol.ContainingType.ToDisplayString(DisplayFormats.FullyQualifiedNonGenericWithGlobalPrefix);

        var methodName = methodSymbol.Name;
        
        foreach (var attributeData in attributes)
        {
            switch (attributeData.AttributeClass?.ToDisplayString(DisplayFormats.FullyQualifiedNonGenericWithGlobalPrefix))
            {
                case "global::TUnit.Core.TestAttribute":
                    sourceBuilder.AppendLine($"\t\tTestDictionary.AddTest(\"\", () => new {className}().{GenerateTestMethodInvocation(methodSymbol)});");
                    break;
                case "global::TUnit.Core.DataDrivenTestAttribute":
                    break;
                case "global::TUnit.Core.DataSourceDrivenTestAttribute": 
                    break;
                case "global::TUnit.Core.CombinativeTestAttribute": 
                    break;
            }
        }
    }

    private string GenerateTestMethodInvocation(IMethodSymbol method)
    {
        var methodName = method.Name;
        
        return $"{methodName}({method.Parameters.LastOrDefault()?.Name})";
    }
}

public record Method
{
    public SyntaxTree SyntaxTree { get; }
    public MethodDeclarationSyntax MethodDeclarationSyntax { get; }

    public Method(SyntaxTree syntaxTree, MethodDeclarationSyntax methodDeclarationSyntax)
    {
        SyntaxTree = syntaxTree;
        MethodDeclarationSyntax = methodDeclarationSyntax;
    }
}